
* Started at 2018-04-12T23:20:26.896Z

* Settings
Project dir: /opt/projects/error-prone-performance-copy/rxjava
Output dir: profile-out-4
Profiler: JProfiler
Benchmark: false
Versions: []
Gradle User Home: gradle-user-home
Targets: []

* Locating default Gradle version
Downloading https://services.gradle.org/distributions/gradle-4.6-bin.zip

Unzipping /opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo/gradle-4.6-bin.zip to /opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo
Set executable permissions for: /opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo/gradle-4.6/bin/gradle
Download https://jcenter.bintray.com/ru/vyarus/gradle-animalsniffer-plugin/1.2.0/gradle-animalsniffer-plugin-1.2.0.pom
Download https://jcenter.bintray.com/com/jfrog/bintray/gradle/gradle-bintray-plugin/1.7.3/gradle-bintray-plugin-1.7.3.pom
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-extractor-gradle/4.5.2/build-info-extractor-gradle-4.5.2.pom
Download https://plugins.gradle.org/m2/me/champeau/gradle/jmh-gradle-plugin/0.4.4/jmh-gradle-plugin-0.4.4.pom
Download https://plugins.gradle.org/m2/gradle/plugin/nl/javadude/gradle/plugins/license-gradle-plugin/0.13.1/license-gradle-plugin-0.13.1.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.pom
Download https://jcenter.bintray.com/com/mycila/xmltool/xmltool/3.3/xmltool-3.3.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus/2.0.6/plexus-2.0.6.pom
Download https://jcenter.bintray.com/com/mycila/maven-license-plugin/maven-license-plugin/1.10.b1/maven-license-plugin-1.10.b1.pom
Download https://jcenter.bintray.com/com/mycila/parent-pom/5/parent-pom-5.pom
Download https://jcenter.bintray.com/org/openjdk/jmh/jmh-core/1.19/jmh-core-1.19.pom
Download https://jcenter.bintray.com/org/openjdk/jmh/jmh-parent/1.19/jmh-parent-1.19.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.pom
Download https://jcenter.bintray.com/org/codehaus/groovy/modules/http-builder/http-builder/0.7.2/http-builder-0.7.2.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-parent/19/maven-parent-19.pom
Download https://jcenter.bintray.com/org/apache/apache/9/apache-9.pom
Download https://jcenter.bintray.com/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.pom
Download https://jcenter.bintray.com/org/apache/ivy/ivy/2.2.0/ivy-2.2.0.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/5/commons-parent-5.pom
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-extractor/2.8.2/build-info-extractor-2.8.2.pom
Download https://jcenter.bintray.com/commons-lang/commons-lang/2.4/commons-lang-2.4.pom
Download https://jcenter.bintray.com/org/codehaus/groovy/groovy-all/2.4.7/groovy-all-2.4.7.pom
Download https://jcenter.bintray.com/org/apache/apache/7/apache-7.pom
Download https://jcenter.bintray.com/org/apache/apache/4/apache-4.pom
Download https://jcenter.bintray.com/commons-io/commons-io/2.2/commons-io-2.2.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/9/commons-parent-9.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/24/commons-parent-24.pom
Download https://jcenter.bintray.com/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.pom
Download https://jcenter.bintray.com/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.2/commons-math3-3.2.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/28/commons-parent-28.pom
Download https://jcenter.bintray.com/org/apache/apache/13/apache-13.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpclient/4.2.1/httpclient-4.2.1.pom
Download https://jcenter.bintray.com/net/sourceforge/nekohtml/nekohtml/1.9.16/nekohtml-1.9.16.pom
Download https://jcenter.bintray.com/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.pom
Download https://jcenter.bintray.com/net/sf/json-lib/json-lib/2.3/json-lib-2.3.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcomponents-client/4.2.1/httpcomponents-client-4.2.1.pom
Download https://jcenter.bintray.com/org/apache/apache/3/apache-3.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/project/6/project-6.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-file/1.0-beta-6/wagon-file-1.0-beta-6.pom
Download https://jcenter.bintray.com/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-error-diagnostics/2.2.1/maven-error-diagnostics-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/ant/ant/1.8.0/ant-1.8.0.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-provider-api/1.0-beta-6/wagon-provider-api-1.0-beta-6.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-http-lightweight/1.0-beta-6/wagon-http-lightweight-1.0-beta-6.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven/2.2.1/maven-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-providers/1.0-beta-6/wagon-providers-1.0-beta-6.pom
Download https://jcenter.bintray.com/org/apache/ant/ant-parent/1.8.0/ant-parent-1.8.0.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon/1.0-beta-6/wagon-1.0-beta-6.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-components/1.1.14/plexus-components-1.1.14.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-parent/11/maven-parent-11.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom
Download https://jcenter.bintray.com/org/apache/apache/5/apache-5.pom
Download https://jcenter.bintray.com/com/google/guava/guava/18.0/guava-18.0.pom
Download https://jcenter.bintray.com/com/google/guava/guava-parent/18.0/guava-parent-18.0.pom
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-client/2.8.2/build-info-client-2.8.2.pom
Download https://jcenter.bintray.com/com/thoughtworks/xstream/xstream/1.3.1/xstream-1.3.1.pom
Download https://jcenter.bintray.com/com/thoughtworks/xstream/xstream-parent/1.3.1/xstream-parent-1.3.1.pom
Download https://jcenter.bintray.com/commons-codec/commons-codec/1.6/commons-codec-1.6.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/22/commons-parent-22.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcore/4.2.1/httpcore-4.2.1.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcomponents-core/4.2.1/httpcomponents-core-4.2.1.pom
Download https://jcenter.bintray.com/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.pom
Download https://jcenter.bintray.com/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0.pom
Download https://jcenter.bintray.com/net/sf/ezmorph/ezmorph/1.0.6/ezmorph-1.0.6.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/11/commons-parent-11.pom
Download https://jcenter.bintray.com/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.pom
Download https://jcenter.bintray.com/org/apache/ant/ant-launcher/1.8.0/ant-launcher-1.8.0.pom
Download https://jcenter.bintray.com/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.pom
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-http-shared/1.0-beta-6/wagon-http-shared-1.0-beta-6.pom
Download https://jcenter.bintray.com/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.pom
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-api/2.8.2/build-info-api-2.8.2.pom
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-core/2.8.1/jackson-core-2.8.1.pom
Download https://jcenter.bintray.com/com/fasterxml/jackson/jackson-parent/2.8/jackson-parent-2.8.pom
Download https://jcenter.bintray.com/com/fasterxml/oss-parent/27/oss-parent-27.pom
Download https://jcenter.bintray.com/junit/junit/3.8.1/junit-3.8.1.pom
Download https://jcenter.bintray.com/nekohtml/xercesMinimal/1.9.6.2/xercesMinimal-1.9.6.2.pom
Download https://jcenter.bintray.com/nekohtml/nekohtml/1.9.6.2/nekohtml-1.9.6.2.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-compress/1.3/commons-compress-1.3.pom
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-databind/2.8.1/jackson-databind-2.8.1.pom
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.pom
Download https://jcenter.bintray.com/commons-codec/commons-codec/1.8/commons-codec-1.8.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpclient/4.5.2/httpclient-4.5.2.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcomponents-client/4.5.2/httpcomponents-client-4.5.2.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/project/7/project-7.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcore/4.4.5/httpcore-4.4.5.pom
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcomponents-core/4.4.5/httpcomponents-core-4.4.5.pom
Download https://jcenter.bintray.com/commons-logging/commons-logging/1.2/commons-logging-1.2.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/34/commons-parent-34.pom
Download https://jcenter.bintray.com/commons-codec/commons-codec/1.9/commons-codec-1.9.pom
Download https://jcenter.bintray.com/org/apache/commons/commons-parent/32/commons-parent-32.pom
Download https://plugins.gradle.org/m2/me/champeau/gradle/jmh-gradle-plugin/0.4.4/jmh-gradle-plugin-0.4.4.jar
Download https://plugins.gradle.org/m2/gradle/plugin/nl/javadude/gradle/plugins/license-gradle-plugin/0.13.1/license-gradle-plugin-0.13.1.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-error-diagnostics/2.2.1/maven-error-diagnostics-2.2.1.jar
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-extractor/2.8.2/build-info-extractor-2.8.2.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.jar
Download https://jcenter.bintray.com/com/jfrog/bintray/gradle/gradle-bintray-plugin/1.7.3/gradle-bintray-plugin-1.7.3.jar
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-file/1.0-beta-6/wagon-file-1.0-beta-6.jar
Download https://jcenter.bintray.com/com/mycila/xmltool/xmltool/3.3/xmltool-3.3.jar
Download https://jcenter.bintray.com/ru/vyarus/gradle-animalsniffer-plugin/1.2.0/gradle-animalsniffer-plugin-1.2.0.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.jar
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-client/2.8.2/build-info-client-2.8.2.jar
Download https://jcenter.bintray.com/commons-logging/commons-logging/1.2/commons-logging-1.2.jar
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.jar
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-provider-api/1.0-beta-6/wagon-provider-api-1.0-beta-6.jar
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-http-shared/1.0-beta-6/wagon-http-shared-1.0-beta-6.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.jar
Download https://jcenter.bintray.com/com/mycila/maven-license-plugin/maven-license-plugin/1.10.b1/maven-license-plugin-1.10.b1.jar
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-extractor-gradle/4.5.2/build-info-extractor-gradle-4.5.2.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.jar
Download https://jcenter.bintray.com/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpclient/4.5.2/httpclient-4.5.2.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.jar
Download https://jcenter.bintray.com/org/codehaus/groovy/modules/http-builder/http-builder/0.7.2/http-builder-0.7.2.jar
Download https://jcenter.bintray.com/org/jfrog/buildinfo/build-info-api/2.8.2/build-info-api-2.8.2.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.jar
Download https://jcenter.bintray.com/org/apache/maven/wagon/wagon-http-lightweight/1.0-beta-6/wagon-http-lightweight-1.0-beta-6.jar
Download https://jcenter.bintray.com/org/openjdk/jmh/jmh-core/1.19/jmh-core-1.19.jar
Download https://jcenter.bintray.com/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.jar
Download https://jcenter.bintray.com/org/apache/ivy/ivy/2.2.0/ivy-2.2.0.jar
Download https://jcenter.bintray.com/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0.jar
Download https://jcenter.bintray.com/net/sf/ezmorph/ezmorph/1.0.6/ezmorph-1.0.6.jar
Download https://jcenter.bintray.com/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar
Download https://jcenter.bintray.com/org/codehaus/groovy/groovy-all/2.4.7/groovy-all-2.4.7.jar
Download https://jcenter.bintray.com/commons-lang/commons-lang/2.4/commons-lang-2.4.jar
Download https://jcenter.bintray.com/net/sourceforge/nekohtml/nekohtml/1.9.16/nekohtml-1.9.16.jar
Download https://jcenter.bintray.com/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar
Download https://jcenter.bintray.com/commons-io/commons-io/2.2/commons-io-2.2.jar
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-utils/2.0.5/plexus-utils-2.0.5.jar
Download https://jcenter.bintray.com/commons-codec/commons-codec/1.9/commons-codec-1.9.jar
Download https://jcenter.bintray.com/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar
Download https://jcenter.bintray.com/com/google/guava/guava/18.0/guava-18.0.jar
Download https://jcenter.bintray.com/com/thoughtworks/xstream/xstream/1.3.1/xstream-1.3.1.jar
Download https://jcenter.bintray.com/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar
Download https://jcenter.bintray.com/org/apache/ant/ant-launcher/1.8.0/ant-launcher-1.8.0.jar
Download https://jcenter.bintray.com/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.jar
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-core/2.8.1/jackson-core-2.8.1.jar
Download https://jcenter.bintray.com/junit/junit/3.8.1/junit-3.8.1.jar
Download https://jcenter.bintray.com/org/apache/ant/ant/1.8.0/ant-1.8.0.jar
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-databind/2.8.1/jackson-databind-2.8.1.jar
Download https://jcenter.bintray.com/nekohtml/xercesMinimal/1.9.6.2/xercesMinimal-1.9.6.2.jar
Download https://jcenter.bintray.com/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar
Download https://jcenter.bintray.com/net/sf/json-lib/json-lib/2.3/json-lib-2.3-jdk15.jar
Download https://jcenter.bintray.com/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar
Download https://jcenter.bintray.com/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar
Download https://jcenter.bintray.com/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar
Download https://jcenter.bintray.com/org/apache/httpcomponents/httpcore/4.4.5/httpcore-4.4.5.jar
Download https://jcenter.bintray.com/org/apache/commons/commons-compress/1.3/commons-compress-1.3.jar
Download https://jcenter.bintray.com/nekohtml/nekohtml/1.9.6.2/nekohtml-1.9.6.2.jar
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@5d82f617.*]
:help

Welcome to Gradle 4.6.

To run a build, run gradle <task> ...

To see a list of available tasks, run gradle tasks

To see a list of command-line options, run gradle --help

To see more detail about a task, run gradle help --task <task>

For troubleshooting, visit https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 11s
1 actionable task: 1 executed

* Stopping daemons
Stopping Daemon(s)
1 Daemon stopped

* Scenarios
Scenario: assemble_baseline using Gradle 4.6
  Gradle version: 4.6 (/opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo/gradle-4.6)
  Run using: ToolingApi
  Cleanup Tasks: [clean]
  Tasks: [assemble]
  Gradle args: []
  Build changes: GitCheckoutMutator(cleanup: null, build: baseline)
  Warm-ups: 5
  Builds: 1
Scenario: assemble_error_prone using Gradle 4.6
  Gradle version: 4.6 (/opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo/gradle-4.6)
  Run using: ToolingApi
  Cleanup Tasks: [clean]
  Tasks: [assemble]
  Gradle args: []
  Build changes: GitCheckoutMutator(cleanup: null, build: rxjava/error-prone-default)
  Warm-ups: 5
  Builds: 1
Scenario: assemble_error_prone_disable_expensive_checks using Gradle 4.6
  Gradle version: 4.6 (/opt/projects/error-prone-performance/gradle-user-home/wrapper/dists/gradle-4.6-bin/4jp4stjndanmxuerzfseyb6wo/gradle-4.6)
  Run using: ToolingApi
  Cleanup Tasks: [clean]
  Tasks: [assemble]
  Gradle args: []
  Build changes: GitCheckoutMutator(cleanup: null, build: rxjava/error-prone-disable-expensive-checks)
  Warm-ups: 5
  Builds: 1

* Running scenario assemble_baseline using Gradle 4.6 (scenario 1/3)

* Stopping daemons
No Gradle daemons are running.

* Build details
Gradle version: 4.6
Java home: /usr/lib/jvm/java-8-oracle
OS name: Linux 4.4.0-119-generic
JVM args:
  -Dfile.encoding=UTF-8
  -Duser.country=US
  -Duser.language=en
  -Duser.variant
  -Dorg.gradle.profiler.scenario=assemble_baseline
  -agentpath:/home/build_user/jprofiler10/bin/linux-x64/libjprofilerti.so=offline,id=1,config=/tmp/jprofiler786014722061396529.xml,sysprop=jprofiler.jmxServerPort=44389
Gradle args:
  -I
  /tmp/gradleProfilerPidInstrumentation2258383112631714088.gradle
  --gradle-user-home
  /opt/projects/error-prone-performance/gradle-user-home
> Resetting Git hard
HEAD is now at b9a3315 Fix profiling scripts.
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean

* Running warm-up build #1 with cleanup tasks [clean]
JProfiler> WARNING: No authentication for JMX server specified.
JProfiler> Pass -Djprofiler.jmxPasswordFile=<file> to set up authentication
JProfiler> JMX server started, use jpcontroller to connect
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@2e6e7b0d.*]
:clean UP-TO-DATE

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 5s
1 actionable task: 1 up-to-date
Used daemon with pid 736
Execution time 5707 ms
> Checking out baseline
Switched to a new branch 'baseline'
Branch baseline set up to track remote branch baseline from origin.

* Running warm-up build #1 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@56d410e7.*]
:compileJava
Download https://repo.maven.apache.org/maven2/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.pom
Download https://repo.maven.apache.org/maven2/org/reactivestreams/reactive-streams/1.0.2/reactive-streams-1.0.2.jar
warning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning
:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 10s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 10631 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #2 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@79515e3a.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 736
Execution time 235 ms
> Checking out baseline
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'baseline'
Your branch is up-to-date with 'origin/baseline'.

* Running warm-up build #2 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@40cc3748.*]
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 6s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 6691 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #3 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@f9e955d.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 736
Execution time 180 ms
> Checking out baseline
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'baseline'
Your branch is up-to-date with 'origin/baseline'.

* Running warm-up build #3 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@6c312b7e.*]
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 6s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 6233 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #4 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@314bed9a.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 736
Execution time 168 ms
> Checking out baseline
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'baseline'
Your branch is up-to-date with 'origin/baseline'.

* Running warm-up build #4 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@288b1cfe.*]
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 6s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 6055 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #5 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@36df57b.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 736
Execution time 166 ms
> Checking out baseline
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'baseline'
Your branch is up-to-date with 'origin/baseline'.

* Running warm-up build #5 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@401908ed.*]
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 5s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 6001 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Using args for instrumented builds:

* Starting profiler for daemon with pid 736

* Running measured build #1 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@4bddef37.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 736
Execution time 155 ms
> Checking out baseline
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'baseline'
Your branch is up-to-date with 'origin/baseline'.

* Running measured build #1 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@491b9f77.*]
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 7s
6 actionable tasks: 6 executed
Used daemon with pid 736
Execution time 7084 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Stopping profiler for daemon with pid 736

* Stopping daemons
Stopping Daemon(s)
1 Daemon stopped

* Running scenario assemble_error_prone using Gradle 4.6 (scenario 2/3)

* Stopping daemons
No Gradle daemons are running.

* Build details
Gradle version: 4.6
Java home: /usr/lib/jvm/java-8-oracle
OS name: Linux 4.4.0-119-generic
JVM args:
  -Dfile.encoding=UTF-8
  -Duser.country=US
  -Duser.language=en
  -Duser.variant
  -Dorg.gradle.profiler.scenario=assemble_error_prone
  -agentpath:/home/build_user/jprofiler10/bin/linux-x64/libjprofilerti.so=offline,id=1,config=/tmp/jprofiler4992170483294743838.xml,sysprop=jprofiler.jmxServerPort=36328
Gradle args:
  -I
  /tmp/gradleProfilerPidInstrumentation2258383112631714088.gradle
  --gradle-user-home
  /opt/projects/error-prone-performance/gradle-user-home
> Resetting Git hard
HEAD is now at b9a3315 Fix profiling scripts.
HEAD detached at b9a3315
nothing to commit, working directory clean

* Running warm-up build #1 with cleanup tasks [clean]
JProfiler> WARNING: No authentication for JMX server specified.
JProfiler> Pass -Djprofiler.jmxPasswordFile=<file> to set up authentication
JProfiler> JMX server started, use jpcontroller to connect
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@aa3f8ed.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 5s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 5500 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to a new branch 'rxjava/error-prone-default'
Branch rxjava/error-prone-default set up to track remote branch rxjava/error-prone-default from origin.

* Running warm-up build #1 with build tasks [assemble]
Download https://plugins.gradle.org/m2/net/ltgt/gradle/gradle-errorprone-plugin/0.0.13/gradle-errorprone-plugin-0.0.13.pom
Download https://plugins.gradle.org/m2/net/ltgt/gradle/gradle-errorprone-plugin/0.0.13/gradle-errorprone-plugin-0.0.13.jar
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@74edbdf7.*]
:compileJava
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_core/2.2.0/error_prone_core-2.2.0.pom
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_parent/2.2.0/error_prone_parent-2.2.0.pom
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_check_api/2.2.0/error_prone_check_api-2.2.0.pom
Download https://repo.maven.apache.org/maven2/org/pcollections/pcollections/2.1.2/pcollections-2.1.2.pom
Download https://repo.maven.apache.org/maven2/com/google/guava/guava/22.0/guava-22.0.pom
Download https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.0/jsr305-3.0.0.pom
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.pom
Download https://repo.maven.apache.org/maven2/org/checkerframework/dataflow/2.2.2/dataflow-2.2.2.pom
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotation/2.2.0/error_prone_annotation-2.2.0.pom
Download https://repo.maven.apache.org/maven2/com/github/stephenc/jcip/jcip-annotations/1.0-1/jcip-annotations-1.0-1.pom
Download https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/22.0/guava-parent-22.0.pom
Download https://repo.maven.apache.org/maven2/com/google/code/findbugs/jFormatString/3.0.0/jFormatString-3.0.0.pom
Download https://repo.maven.apache.org/maven2/com/google/auto/auto-common/0.9/auto-common-0.9.pom
Download https://repo.maven.apache.org/maven2/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.pom
Download https://repo.maven.apache.org/maven2/com/google/auto/auto-parent/5/auto-parent-5.pom
Download https://repo.maven.apache.org/maven2/com/github/kevinstern/software-and-algorithms/1.0/software-and-algorithms-1.0.pom
Download https://repo.maven.apache.org/maven2/com/googlecode/java-diff-utils/diffutils/1.3.0/diffutils-1.3.0.pom
Download https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.pom
Download https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.pom
Download https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-parent/1.14/animal-sniffer-parent-1.14.pom
Download https://repo.maven.apache.org/maven2/org/codehaus/mojo/mojo-parent/34/mojo-parent-34.pom
Download https://repo.maven.apache.org/maven2/org/codehaus/codehaus-parent/4/codehaus-parent-4.pom
Download https://repo.maven.apache.org/maven2/org/checkerframework/javacutil/2.2.2/javacutil-2.2.2.pom
Download https://repo.maven.apache.org/maven2/com/google/guava/guava/23.5-jre/guava-23.5-jre.pom
Download https://repo.maven.apache.org/maven2/com/google/guava/guava-parent/23.5-jre/guava-parent-23.5-jre.pom
Download https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.pom
Download https://repo.maven.apache.org/maven2/com/google/code/findbugs/jsr305/3.0.0/jsr305-3.0.0.jar
Download https://repo.maven.apache.org/maven2/com/google/code/findbugs/jFormatString/3.0.0/jFormatString-3.0.0.jar
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotation/2.2.0/error_prone_annotation-2.2.0.jar
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_annotations/2.2.0/error_prone_annotations-2.2.0.jar
Download https://repo.maven.apache.org/maven2/org/checkerframework/dataflow/2.2.2/dataflow-2.2.2.jar
Download https://repo.maven.apache.org/maven2/com/github/kevinstern/software-and-algorithms/1.0/software-and-algorithms-1.0.jar
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_check_api/2.2.0/error_prone_check_api-2.2.0.jar
Download https://repo.maven.apache.org/maven2/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.jar
Download https://repo.maven.apache.org/maven2/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar
Download https://repo.maven.apache.org/maven2/com/google/errorprone/javac/9+181-r4173-1/javac-9+181-r4173-1.jar
Download https://repo.maven.apache.org/maven2/org/pcollections/pcollections/2.1.2/pcollections-2.1.2.jar
Download https://repo.maven.apache.org/maven2/org/checkerframework/javacutil/2.2.2/javacutil-2.2.2.jar
Download https://repo.maven.apache.org/maven2/com/googlecode/java-diff-utils/diffutils/1.3.0/diffutils-1.3.0.jar
Download https://repo.maven.apache.org/maven2/com/google/guava/guava/23.5-jre/guava-23.5-jre.jar
Download https://repo.maven.apache.org/maven2/com/google/auto/auto-common/0.9/auto-common-0.9.jar
Download https://repo.maven.apache.org/maven2/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar
Download https://repo.maven.apache.org/maven2/com/github/stephenc/jcip/jcip-annotations/1.0-1/jcip-annotations-1.0-1.jar
Download https://repo.maven.apache.org/maven2/com/google/errorprone/error_prone_core/2.2.0/error_prone_core-2.2.0.jar
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings
:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 21s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 21953 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #2 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@2bb45e6c.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 542 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-default'
Your branch is up-to-date with 'origin/rxjava/error-prone-default'.

* Running warm-up build #2 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@54ab151c.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 16s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 16974 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #3 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@3b2d3e01.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 473 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-default'
Your branch is up-to-date with 'origin/rxjava/error-prone-default'.

* Running warm-up build #3 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@510499db.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 17s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 17052 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #4 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@43b4d081.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 463 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-default'
Your branch is up-to-date with 'origin/rxjava/error-prone-default'.

* Running warm-up build #4 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@2df6c145.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 17s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 17315 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #5 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@67e96b14.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 439 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-default'
Your branch is up-to-date with 'origin/rxjava/error-prone-default'.

* Running warm-up build #5 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@3165bb15.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 17s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 17430 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Using args for instrumented builds:

* Starting profiler for daemon with pid 2062

* Running measured build #1 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@7b94ec9f.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 2062
Execution time 457 ms
> Checking out rxjava/error-prone-default
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-default'
Your branch is up-to-date with 'origin/rxjava/error-prone-default'.

* Running measured build #1 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@25277c25.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 22s
6 actionable tasks: 6 executed
Used daemon with pid 2062
Execution time 22456 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Stopping profiler for daemon with pid 2062

* Stopping daemons
Stopping Daemon(s)
1 Daemon stopped

* Running scenario assemble_error_prone_disable_expensive_checks using Gradle 4.6 (scenario 3/3)

* Stopping daemons
No Gradle daemons are running.

* Build details
Gradle version: 4.6
Java home: /usr/lib/jvm/java-8-oracle
OS name: Linux 4.4.0-119-generic
JVM args:
  -Dfile.encoding=UTF-8
  -Duser.country=US
  -Duser.language=en
  -Duser.variant
  -Dorg.gradle.profiler.scenario=assemble_error_prone_disable_expensive_checks
  -agentpath:/home/build_user/jprofiler10/bin/linux-x64/libjprofilerti.so=offline,id=1,config=/tmp/jprofiler1492173627588168146.xml,sysprop=jprofiler.jmxServerPort=37347
Gradle args:
  -I
  /tmp/gradleProfilerPidInstrumentation2258383112631714088.gradle
  --gradle-user-home
  /opt/projects/error-prone-performance/gradle-user-home
> Resetting Git hard
HEAD is now at b9a3315 Fix profiling scripts.
HEAD detached at b9a3315
nothing to commit, working directory clean

* Running warm-up build #1 with cleanup tasks [clean]
JProfiler> WARNING: No authentication for JMX server specified.
JProfiler> Pass -Djprofiler.jmxPasswordFile=<file> to set up authentication
JProfiler> JMX server started, use jpcontroller to connect
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@aa3f8ed.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 5s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 5474 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to a new branch 'rxjava/error-prone-disable-expensive-checks'
Branch rxjava/error-prone-disable-expensive-checks set up to track remote branch rxjava/error-prone-disable-expensive-checks from origin.

* Running warm-up build #1 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@26f0415e.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 17s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 17441 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #2 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@1be113dc.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 834 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-disable-expensive-checks'
Your branch is up-to-date with 'origin/rxjava/error-prone-disable-expensive-checks'.

* Running warm-up build #2 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@141ac9cc.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 15s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 15258 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #3 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@633c39b.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 463 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-disable-expensive-checks'
Your branch is up-to-date with 'origin/rxjava/error-prone-disable-expensive-checks'.

* Running warm-up build #3 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@262a797a.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 15s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 15560 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #4 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@5dd42bf4.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 461 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-disable-expensive-checks'
Your branch is up-to-date with 'origin/rxjava/error-prone-disable-expensive-checks'.

* Running warm-up build #4 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@378e3a42.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 16s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 16122 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Running warm-up build #5 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@4f2222ba.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 469 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-disable-expensive-checks'
Your branch is up-to-date with 'origin/rxjava/error-prone-disable-expensive-checks'.

* Running warm-up build #5 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@278a207c.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 15s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 15709 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Using args for instrumented builds:

* Starting profiler for daemon with pid 3386

* Running measured build #1 with cleanup tasks [clean]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@8691d03.*]
:clean

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 0s
1 actionable task: 1 executed
Used daemon with pid 3386
Execution time 443 ms
> Checking out rxjava/error-prone-disable-expensive-checks
Previous HEAD position was b9a3315... Fix profiling scripts.
Switched to branch 'rxjava/error-prone-disable-expensive-checks'
Your branch is up-to-date with 'origin/rxjava/error-prone-disable-expensive-checks'.

* Running measured build #1 with build tasks [assemble]
JMH: [.*me.champeau.gradle.JMHPluginExtension_Decorated@22418bf2.*]
:compileJava/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Scheduler.java:321: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public <S extends Scheduler & Disposable> S when(@NonNull Function<Flowable<Flowable<Completable>>, Completable> combine) {
                                                ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/queue/SpscLinkedArrayQueue.java:57: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
        producerLookAhead = mask - 1; // we know it's all empty to start with
                                 ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'producerLookAhead = mask - 1L;'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/processors/ReplayProcessor.java:588: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:36: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:45: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
        this.resources = new LinkedList<Disposable>();
                         ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.resources = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:83: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/disposables/ListCompositeDisposable.java:102: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
                        set = new LinkedList<Disposable>();
                              ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'set = new ArrayList<Disposable>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableRefCount.java:35: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractFlowableWithUpstream
    final ConnectableFlowable<T> source;
                                 ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java:249: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:240: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:292: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:326: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableGroupJoin.java:335: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:217: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:277: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:338: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableJoin.java:344: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableWindowTimed.java:621: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastProcessor<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastProcessor<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:579: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:630: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:636: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableReplay.java:642: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/flowable/BlockingFlowableIterable.java:70: warning: [IntLongMath] Expression of type int may overflow before being assigned to a long
            this.limit = batchSize - (batchSize >> 2);
                                   ^
    (see http://errorprone.info/bugpattern/IntLongMath)
  Did you mean 'this.limit = (long) batchSize - (batchSize >> 2);'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:68: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/LinkedArrayList.java:72: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:236: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:281: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:315: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableGroupJoin.java:324: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_CLOSE)) {' or 'else if (mode.equals(RIGHT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:213: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    if (mode == LEFT_VALUE) {
                             ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'if (Objects.equals(mode, LEFT_VALUE)) {' or 'if (mode.equals(LEFT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:256: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == RIGHT_VALUE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, RIGHT_VALUE)) {' or 'else if (mode.equals(RIGHT_VALUE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableJoin.java:300: warning: [ReferenceEquality] Comparison using reference equality instead of value equality
                    else if (mode == LEFT_CLOSE) {
                                  ^
    (see http://errorprone.info/bugpattern/ReferenceEquality)
  Did you mean 'else if (Objects.equals(mode, LEFT_CLOSE)) {' or 'else if (mode.equals(LEFT_CLOSE)) {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableRefCount.java:34: warning: [HidingField] Hiding fields of superclasses may cause confusion and errors. This field is hiding a field of the same name in superclass: AbstractObservableWithUpstream
    final ConnectableObservable<? extends T> source;
                                             ^
    (see http://errorprone.info/bugpattern/HidingField)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:466: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
        <U> U index() {
              ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:517: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:523: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java:529: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableWindowTimed.java:544: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.windows = new LinkedList<UnicastSubject<T>>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.windows = new ArrayList<UnicastSubject<T>>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableBufferTimed.java:238: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.
            this.buffers = new LinkedList<U>();
                           ^
    (see http://errorprone.info/bugpattern/JdkObsolete)
  Did you mean 'this.buffers = new ArrayList<U>();'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java:133: warning: [UnsynchronizedOverridesSynchronized] Unsynchronized method fillInStackTrace overrides synchronized method in Throwable
        public Throwable fillInStackTrace() {
                         ^
    (see http://errorprone.info/bugpattern/UnsynchronizedOverridesSynchronized)
  Did you mean 'public synchronized Throwable fillInStackTrace() {'?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/util/NotificationLite.java:179: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.
    public static <T> T getValue(Object o) {
                        ^
    (see http://errorprone.info/bugpattern/TypeParameterUnusedInFormals)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/internal/schedulers/SchedulerPoolFactory.java:71: warning: [FutureReturnValueIgnored] Return value of methods returning Future must be checked. Ignoring returned Futures suppresses exceptions thrown from the code that completes the Future.
                    next.scheduleAtFixedRate(new ScheduledTask(), PURGE_PERIOD_SECONDS, PURGE_PERIOD_SECONDS, TimeUnit.SECONDS);
                                            ^
    (see http://errorprone.info/bugpattern/FutureReturnValueIgnored)
  Did you mean to remove this line?
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:645: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/subjects/ReplaySubject.java:652: warning: [NonAtomicVolatileUpdate] This update of a volatile variable is non-atomic
            size++;
                ^
    (see http://errorprone.info/bugpattern/NonAtomicVolatileUpdate)
44 warnings

:processResources NO-SOURCE
:classes
:osgiClasses
:jar
:javadoc/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                     ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                      ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                               ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/FlowableSubscriber.java:21: error: unmappable character for encoding ASCII
 * and weakens rules ??1.3 and ??3.9 of the specification for gaining performance.
                                ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14289: error: unmappable character for encoding ASCII
     * <li>??1.3: onNext should not be called concurrently until onSubscribe returns.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14291: error: unmappable character for encoding ASCII
     * <li>??2.3: onError or onComplete must not call cancel.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14293: error: unmappable character for encoding ASCII
     * <li>??2.12: onSubscribe must be called at most once on the same instance.
            ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
           ^
/opt/projects/error-prone-performance-copy/rxjava/src/main/java/io/reactivex/Flowable.java:14296: error: unmappable character for encoding ASCII
     * <li>??3.9: negative requests should emit an onError(IllegalArgumentException).
            ^

12 errors
:javadocJar
:sourcesJar
:assemble

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
See https://docs.gradle.org/4.6/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 20s
6 actionable tasks: 6 executed
Used daemon with pid 3386
Execution time 20582 ms
> Checking out b9a3315ec41bb4e51d410c992a0ec320c5cae5e4
Note: checking out 'b9a3315ec41bb4e51d410c992a0ec320c5cae5e4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at b9a3315... Fix profiling scripts.

* Stopping profiler for daemon with pid 3386

* Stopping daemons
Stopping Daemon(s)
1 Daemon stopped

* Results written to /opt/projects/error-prone-performance/profile-out-4
  /opt/projects/error-prone-performance/profile-out-4/assemble_error_prone_disable_expensive_checks/assemble_error_prone_disable_expensive_checks-4.6.jps
  /opt/projects/error-prone-performance/profile-out-4/assemble_error_prone/assemble_error_prone-4.6.jps
  /opt/projects/error-prone-performance/profile-out-4/assemble_baseline/assemble_baseline-4.6.jps

